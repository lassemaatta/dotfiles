#+TITLE: Emacs Configuration
* Table of Contents                                            :TOC:noexport:
- [[#preamble][Preamble]]
- [[#load-initial-configuration][Load initial configuration]]
  - [[#disable-gc-while-loading][Disable GC while loading]]
  - [[#bootstrap-use-package][Bootstrap =use-package=]]
  - [[#load-optional-local-settings][Load optional local settings]]
  - [[#generate-toc][Generate TOC]]
- [[#general-configuration-for-emacs][General configuration for =emacs=]]
  - [[#quality-of-life][Quality-of-Life]]
  - [[#backups][Backups]]
  - [[#performance][Performance]]
  - [[#scrolling][Scrolling]]
  - [[#whitespace][Whitespace]]
  - [[#file-system-dired][File system (=dired=)]]
  - [[#ui][UI]]
- [[#general-programming][General programming]]
- [[#packages][Packages]]
  - [[#theming-doom-themes][Theming (=doom-themes=)]]
  - [[#utilities][Utilities]]
  - [[#project-and-file-management][Project and File Management]]
  - [[#programming][Programming]]
- [[#postamble][Postamble]]

* Preamble

#+BEGIN_SRC emacs-lisp
  ;;; settings.el --- My custom config
  ;;; Commentary:
  ;;; Code:
#+END_SRC

* Load initial configuration

** Disable GC while loading

Startup times can be improved if we temporarily disable garbage collection.

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold (* 128 1024 1024))))
#+END_SRC

** Bootstrap =use-package=

#+BEGIN_SRC emacs-lisp
  (unless package-archive-contents
    (package-refresh-contents))

  (defvar my-package-list '(use-package))

  (dolist (package my-package-list)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC

Always install all packages.

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t
        use-package-verbose t
        use-package-compute-statistics t)
#+END_SRC

** Load optional local settings

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/init/")
  (require 'init-local nil t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/emacs-custom.el")
  (load custom-file)
#+END_SRC

** Generate TOC

Use [[https://github.com/snosov1/toc-org][toc-org]] to generate a Table of Contents for this document for github.

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :hook ((org-mode) . toc-org-mode))
#+END_SRC

* General configuration for =emacs=
** Quality-of-Life

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Automatically refresh buffers if the file has changed on disk.

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

** Backups

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t      ; don't clobber symlinks
        backup-directory-alist
        '(("." . "~/.saves/"))    ; don't litter my fs tree
        auto-save-file-name-transforms
        `((".*" "~/.saves/" t))
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)       ; use versioned backups
#+END_SRC

** Performance

#+BEGIN_SRC emacs-lisp
  (setq read-process-output-max (* 1024 1024))
#+END_SRC

The =suggest-key-bindings= feature adds several seconds of delays to various commands when using =M-x=.

#+BEGIN_SRC emacs-lisp
  (setq suggest-key-bindings nil)
#+END_SRC

Enable shortcuts for the internal profiler

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f9>") 'profiler-start)
  (global-set-key (kbd "<f10>") 'profiler-stop)
  (global-set-key (kbd "<f11>") 'profiler-report)
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
  (setq auto-window-vscroll nil
        fast-but-imprecise-scrolling t
        scroll-conservatively 101
        scroll-margin 0
        scroll-preserve-screen-position t)
#+END_SRC

** Whitespace

Highlight trailing whitespace and don't use tabs for indenting.

#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
  (setq-default indicate-empty-lines t)
  (setq-default indent-tabs-mode nil)
#+END_SRC

Highlight any tabs as if they were trailing whitespace.

#+BEGIN_SRC emacs-lisp
  (add-hook 'font-lock-mode-hook
            (lambda ()
              (font-lock-add-keywords
               nil
               '(("\t" 0 'trailing-whitespace prepend)))))
#+END_SRC

Cleanup trailing whitespace when saving a buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** File system (=dired=)

Re-use the same buffer when navigating to subdirectories in =dired=.

#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src

** UI

Hide the menu bar and toolbar.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

Hide the default splash screen.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

Don't resize the window when we alter the theme/fonts during startup.

#+BEGIN_SRC emacs-lisp
  (setq frame-inhibit-implied-resize t)
#+END_SRC

Don't try to round the frame size based on the font size.

#+BEGIN_SRC emacs-lisp
  (setq frame-resize-pixelwise t)
#+END_SRC

Make the initial emacs frame go fullscreen at startup.

#+begin_src emacs-lisp
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

*** Fonts

#+begin_src emacs-lisp
  (set-frame-font "Source Code Pro-12:weight=semilight")
#+end_src

* General programming

Show line numbers.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

Highlight matching parenthesis.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'show-paren-mode)
#+END_SRC

Indent current function

#+begin_src emacs-lisp
  (defun er-indent-defun ()
    "Indent the current defun."
    (interactive)
    (save-excursion
      (mark-defun)
      (indent-region (region-beginning) (region-end))))

  (global-set-key (kbd "C-<tab>") #'er-indent-defun)
#+end_src

* Packages
** Theming (=doom-themes=)

Use [[https://github.com/doomemacs/themes][doom-themes]] for theming =emacs=.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
    :init
    (setq doom-modeline-vcs-max-length 17
          doom-modeline-buffer-encoding nil)
    :hook (after-init . doom-modeline-mode))

  (use-package doom-themes
    :custom
    (doom-themes-treemacs-theme "doom-colors")
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

Slightly decrease the modeline font size so that the =flycheck= error counters don't get cut off.

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
     '(mode-line ((t (:family "Dejavu Sans Mono" :height 0.95))))
     '(mode-line-active ((t (:family "Dejavu Sans Mono" :height 0.95))))
     '(mode-line-inactive ((t (:family "Dejavu Sans Mono" :height 0.95)))))
#+END_SRC

** Utilities
*** Keybindings

Use [[https://github.com/justbur/emacs-which-key][which-key]] to show suggestions when using keybindings.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :config (which-key-setup-side-window-right-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-separator ":"
          which-key-max-description-length 120
          which-key-side-window-max-width 50
          which-key-idle-delay 1.00))
#+END_SRC

*** Minibuffer completion (=vertico=)

Hide commands in =M-x= which do not apply to the current mode.

#+BEGIN_SRC emacs-lisp
  (setq read-extended-command-predicate #'command-completion-default-include-p)
#+END_SRC

[[https://github.com/minad/vertico][vertico]] provides completion for minibuffer commands.

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))
#+END_SRC

[[https://github.com/oantolin/orderless][orderless]] provides /completion style/ (ie. fuzzy searching) for command completion.

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :after vertico
    :init
    (setq completion-styles '(orderless partial-completion basic)
          completion-category-defaults nil
          completion-category-overrides nil))
#+END_SRC

The [[https://github.com/minad/marginalia][marginalia]] package provides description of entries (e.g. files, commands) in completion menus.

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :after vertico
    :init
    (marginalia-mode))
#+END_SRC

The [[https://github.com/minad/consult][consult]] package provides a bunch of utility functions related to completions (e.g. switch buffer, search within buffer..).

#+BEGIN_SRC emacs-lisp
  (use-package consult
    :after (vertico projectile)
    :bind (("C-s" . consult-line)
           ("C-x b" . consult-buffer))
    :init
    (setq consult-narrow-key "<"
          consult-project-function (lambda (_)
                                     (projectile-project-root))))
#+END_SRC

The [[https://github.com/oantolin/embark][embark]] package provides a way to run commands against the currently active minibuffer target (e.g. =C-x C-f= to browse files, then =C-ä= to choose an action on a file).

#+BEGIN_SRC emacs-lisp
  (use-package embark
    :after vertico
    :bind (("C-ä" . embark-act)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package embark-consult
    :after (embark consult))
#+END_SRC

Use =savehist= to save minibuffer command history between sessions.

#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+END_SRC

*** Search

[[https://github.com/dajva/rg.el][rg]] provides [[https://github.com/BurntSushi/ripgrep][ripgrep]] searching within =emacs=.

#+BEGIN_SRC emacs-lisp
  (use-package rg
    :defer t)
#+END_SRC

*** Org mode

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)))
#+end_src

Enable syntax highlighting when exporting as PDFs. Requires the =minted= package for LaTeX.

#+begin_src emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

#+BEGIN_SRC emacs-lisp
  (require 'org-clock)
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate)
#+END_SRC

*** Notekeeping (=org-roam=)

Use [[https://www.orgroam.com/][=org-roam=]] for notekeeping and timetracking.

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/org-roam")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-db-autosync-mode))

#+END_SRC

*** Better undo (=undo-tree=)

[[https://gitlab.com/tsc25/undo-tree][undo-tree]] provides a nice tree-view of the undo history.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))
          undo-tree-auto-save-history nil)
    :config
    (global-undo-tree-mode))
#+END_SRC

** Project and File Management
*** Startup Dashboard (=dashboard=)

[[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]] shows a list of recent projects and files when opening =emacs=.

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :after (projectile)
    :init
    (setq dashboard-center-content t
          dashboard-set-heading-icons t
          dashboard-projects-backend 'projectile
          dashboard-items '((projects . 5)
                            (recents . 10)))
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

*** File Explorer (=treemacs=)

[[https://github.com/Alexander-Miller/treemacs][treemacs]] offers a Eclipse-like project explorer.

Note that we exclude some build directories so that changes in files don't propagate to =treemacs=.

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :bind (("<f1>" . treemacs)
           ("<f5>" . treemacs-find-file))
    :config
    (progn
      (setq treemacs-space-between-root-nodes nil)
      (treemacs-follow-mode -1)
      (defun treemacs-ignore (filename absolute-path)
        (or (cl-search "/.shadow-cljs" absolute-path)
            (cl-search "/.idea" absolute-path)
            (cl-search "/target" absolute-path)
            (cl-search "/node_modules" absolute-path)))
      (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore)))

  (use-package treemacs-all-the-icons
    :after (treemacs))
#+END_SRC

*** Project Management (=projectile=)

[[https://github.com/bbatsov/projectile][projectile]] is used for managing projects.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :after (vertico)
    :custom ((projectile-completion-system 'default))
    :init
    (setq projectile-project-search-path '("~/work/")
          projectile-switch-project-action #'projectile-dired
          projectile-enable-caching t)
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))
#+END_SRC

Integration with [[https://github.com/Alexander-Miller/treemacs][treemacs]].

#+BEGIN_SRC emacs-lisp
  (use-package treemacs-projectile
    :after (treemacs projectile))
#+END_SRC

*** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status))
#+END_SRC

Use =treemacs-magit= to update the =treemacs= view when =magit= updates the =git= repository state.

#+BEGIN_SRC emacs-lisp
  (use-package treemacs-magit
    :after (magit treemacs))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :hook ((prog-mode . global-diff-hl-mode)
           (dired-mode . diff-hl-dired-mode)
           (magit-pre-refresh . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh)))
#+END_SRC

** Programming

*** Error checking (=flycheck=)

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+end_src

*** Completion (=corfu=)

Regardless of completion provider, always try to complete =<tab>=.

#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)
#+end_src

Use [[https://github.com/minad/corfu][corfu]] for completion at point functionality, similar to =company=.

While completing, use =S-SPC= to add a separator, which does not abort the completion but instead allows you to add more search words.

#+begin_src emacs-lisp
  (use-package corfu
    :init
    (global-corfu-mode)
    :bind (("S-SPC" . corfu-insert-separator)))
#+end_src

When looking at completion candidates with =corfu=, we can use =corfu-doc= to show a documentation popup with docstrings et al.

#+begin_src emacs-lisp
  (use-package corfu-doc
    :hook ((corfu-mode . corfu-doc-mode)))
#+end_src

*** Language Server Protocol
**** General Setup

See the [[https://github.com/minad/corfu/wiki#advanced-example-configuration-with-orderless][Corfu wiki]] on how =corfu= and =orderless= completion can be configured for =lsp-mode=.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :defer 0
    :custom
    (lsp-completion-provider :none)
    :init
    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless)))
    (setq
     ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
     lsp-keymap-prefix "C-c l"
     lsp-idle-delay 1.0
     lsp-lens-enable t
     ;; We don't use yasnippet
     lsp-enable-snippet nil
     ;; Prefer clojure-mode indentation
     lsp-enable-indentation nil
     lsp-modeline-code-actions-enable nil
     ;; For logging IO between client and server
     lsp-log-io nil)
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (clojure-mode . lsp)
           (clojurescript-mode . lsp)
           (clojurec-mode . lsp)
           (js-mode . lsp)
           (typescript-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration)
           (lsp-completion-mode . my/lsp-mode-setup-completion))
    :bind (("<C-return>" . lsp-find-definition)
           ("<C-.>" . lsp-find-definition)
           ("<C-M-return>" . lsp-describe-thing-at-point))
    :commands (lsp lsp-deferred))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :init
    (setq lsp-ui-sideline-show-code-actions nil
          lsp-ui-doc-show-with-cursor t
          lsp-ui-doc-show-with-mouse nil)
    :bind (("M-." . lsp-ui-peek-find-references)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package lsp-treemacs
    :bind (("<f2>" . lsp-treemacs-symbols)
           ("<f3>" . lsp-treemacs-call-hierarchy))
    :init
    (setq lsp-treemacs-symbols-sort-functions '(lsp-treemacs-sort-by-name)))
#+END_SRC

**** Java

#+BEGIN_SRC emacs-lisp
  (use-package lsp-java
    :defer t
    :hook ((java-mode . lsp)))
#+END_SRC

*** Language Modes
**** HTML

Set =.html= indentation from 2 to 4.

#+BEGIN_SRC emacs-lisp
  (add-hook 'html-mode-hook
            (lambda ()
              (set (make-local-variable 'sgml-basic-offset) 4)))
#+END_SRC

**** Docker and =docker-compose=

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode
    :defer t)
#+END_SRC

**** Graphviz and =dot=

#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode
    :defer t
    :hook ((dot . graphviz-dot-mode))
    :config
    (setq graphviz-dot-indent-width 2))
#+END_SRC

**** Groovy

#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :defer t)
#+END_SRC

**** Typescript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :defer t)
#+END_SRC

**** Javascript

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :defer t
    :init
    (add-hook
     'js-mode-hook
     (lambda ()
       (unless (eq major-mode 'json-mode)
               (js2-minor-mode)))))
#+END_SRC

**** SSH config files

#+BEGIN_SRC emacs-lisp
  (use-package ssh-config-mode
    :defer t)
#+END_SRC

*** Clojure
**** =clojure-mode=

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :defer t
    :config
    (setq clojure-indent-style 'align-arguments
          clojure-align-forms-automatically t))
#+END_SRC

**** =cider=

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :defer t
    :init
    (setq nrepl-log-messages t
          cider-repl-buffer-size-limit 10000
          cider-repl-pop-to-buffer-on-connect nil
          cider-repl-use-clojure-font-lock t
          cider-prompt-save-file-on-load 'always-save
          cider-font-lock-dynamically '(macro core function var)
          cider-eldoc-display-for-symbol-at-point nil
          cider-offer-to-open-cljs-app-in-browser nil
          nrepl-hide-special-buffers t
          cider-overlays-use-font-lock t
          cider-default-cljs-repl 'shadow
          cider-enrich-classpath nil)
    :config
    (cider-repl-toggle-pretty-printing)

    (put-clojure-indent 'testit/fact 1)
    (put-clojure-indent 'testit.core/fact 1)
    (put-clojure-indent 'page/html5 1)
    (put-clojure-indent 'fact 1)
    (put-clojure-indent 'rf/reg-event-fx 1)
    (put-clojure-indent 'chain/reg-chain 1)
    (put-clojure-indent 'rf/reg-sub 1)
    (put-clojure-indent 'rf/reg-event-db 1)
    (put-clojure-indent 'futil/for-all 1)
    (put-clojure-indent 'futil/for-frag 1)
    (put-clojure-indent 'for-frag 1)
    (put-clojure-indent 'for-all 1)
    (put-clojure-indent 'u/for-all 1)
    (put-clojure-indent 'not-join 1)
    (put-clojure-indent 'r/with-let 1)
    (put-clojure-indent 'p/if-all-let 1)
    (put-clojure-indent 'test-seq/seq-tx 1))

  ;; To disable cider completion and rely solely on LSP completion
  ;; (add-hook 'cider-mode-hook (lambda () (remove-hook 'completion-at-point-functions #'cider-complete-at-point)))))
#+END_SRC

**** =smartparens=

Note that the =*scratch*= buffer uses =emacs-lisp-mode=, therefore =smartparens= loads on startup.

#+begin_src emacs-lisp
  (use-package smartparens
    :init
    (require 'smartparens-config)
    :hook ((emacs-lisp-mode
            clojure-mode) . turn-on-smartparens-strict-mode)
    :bind (("C-<left>" . sp-backward-symbol)
           ("C-<right>" . sp-forward-symbol)
           ("M-C-<left>" . sp-backward-sexp)
           ("M-C-<right>" . sp-forward-sexp)
           ("M-7" . sp-backward-slurp-sexp)
           ("M-8" . sp-backward-barf-sexp)
           ("M-9" . sp-forward-barf-sexp)
           ("M-0" . sp-forward-slurp-sexp)
           ("C-S-<up>" . sp-mark-sexp))
    :config
    (show-smartparens-global-mode -1))
#+end_src

**** Utilities

#+BEGIN_SRC emacs-lisp
  (defun jet-transit-to-edn ()
    "Run transit->edn conversion on the active buffer."
    (interactive)
    (shell-command-on-region
     (region-beginning)
     (region-end)
     "/home/lassemaatta/bin/jet --pretty --from transit --edn-reader-opts '{:default tagged-literal}'"
     (current-buffer)
     t
     "*jet error buffer*"
     t))

  (defun jet-edn-to-edn ()
    "Format EDN in the active buffer region."
    (interactive)
    (shell-command-on-region
     (region-beginning)
     (region-end)
     "/home/lassemaatta/bin/jet --pretty --from edn --edn-reader-opts '{:default tagged-literal}'"
     (current-buffer)
     t
     "*jet error buffer*"
     t))
#+END_SRC

* Postamble

#+BEGIN_SRC emacs-lisp
  ;;; settings.el ends here
#+END_SRC
